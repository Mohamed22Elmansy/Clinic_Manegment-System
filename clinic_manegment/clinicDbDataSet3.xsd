<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="clinicDbDataSet3" targetNamespace="http://tempuri.org/clinicDbDataSet3.xsd" xmlns:mstns="http://tempuri.org/clinicDbDataSet3.xsd" xmlns="http://tempuri.org/clinicDbDataSet3.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="clinicDbConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="clinicDbConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.clinic_manegment.Properties.Settings.GlobalReference.Default.clinicDbConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="TestTb1TableAdapter" GeneratorDataComponentClassName="TestTb1TableAdapter" Name="TestTb1" UserDataComponentName="TestTb1TableAdapter">
            <MainSource>
              <DbSource ConnectionRef="clinicDbConnectionString (Settings)" DbObjectName="dbo.TestTb1" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[TestTb1] WHERE (([testid] = @Original_testid) AND ([testname] = @Original_testname) AND ([testcost] = @Original_testcost))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_testid" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testid" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_testname" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="testname" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_testcost" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testcost" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[TestTb1] ([testname], [testcost]) VALUES (@testname, @testcost);
SELECT testid, testname, testcost FROM TestTb1 WHERE (testid = SCOPE_IDENTITY())</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@testname" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="testname" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@testcost" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testcost" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT testid, testname, testcost FROM dbo.TestTb1</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[TestTb1] SET [testname] = @testname, [testcost] = @testcost WHERE (([testid] = @Original_testid) AND ([testname] = @Original_testname) AND ([testcost] = @Original_testcost));
SELECT testid, testname, testcost FROM TestTb1 WHERE (testid = @testid)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@testname" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="testname" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@testcost" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testcost" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_testid" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testid" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_testname" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="testname" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_testcost" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="testcost" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="testid" ColumnName="testid" DataSourceName="[E:\SUBJECTS\TERM 2\PROGRAMMING 3\CLINIC_MANEGMENT\CLINIC_MANEGMENT\CLINICDB.MDF].dbo.TestTb1" DataTypeServer="int" DbType="Int32" Direction="Input" ParameterName="@testid" Precision="0" ProviderType="Int" Scale="0" Size="4" SourceColumn="testid" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="testid" DataSetColumn="testid" />
              <Mapping SourceColumn="testname" DataSetColumn="testname" />
              <Mapping SourceColumn="testcost" DataSetColumn="testcost" />
            </Mappings>
            <Sources />
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="clinicDbDataSet3" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="True" msprop:Generator_DataSetName="clinicDbDataSet3" msprop:Generator_UserDSName="clinicDbDataSet3">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="TestTb1" msprop:Generator_TableClassName="TestTb1DataTable" msprop:Generator_TableVarName="tableTestTb1" msprop:Generator_TablePropName="TestTb1" msprop:Generator_RowDeletingName="TestTb1RowDeleting" msprop:Generator_RowChangingName="TestTb1RowChanging" msprop:Generator_RowEvHandlerName="TestTb1RowChangeEventHandler" msprop:Generator_RowDeletedName="TestTb1RowDeleted" msprop:Generator_UserTableName="TestTb1" msprop:Generator_RowChangedName="TestTb1RowChanged" msprop:Generator_RowEvArgName="TestTb1RowChangeEvent" msprop:Generator_RowClassName="TestTb1Row">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="testid" msdata:ReadOnly="true" msdata:AutoIncrement="true" msdata:AutoIncrementSeed="-1" msdata:AutoIncrementStep="-1" msprop:Generator_ColumnVarNameInTable="columntestid" msprop:Generator_ColumnPropNameInRow="testid" msprop:Generator_ColumnPropNameInTable="testidColumn" msprop:Generator_UserColumnName="testid" type="xs:int" />
              <xs:element name="testname" msprop:Generator_ColumnVarNameInTable="columntestname" msprop:Generator_ColumnPropNameInRow="testname" msprop:Generator_ColumnPropNameInTable="testnameColumn" msprop:Generator_UserColumnName="testname">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="50" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="testcost" msprop:Generator_ColumnVarNameInTable="columntestcost" msprop:Generator_ColumnPropNameInRow="testcost" msprop:Generator_ColumnPropNameInTable="testcostColumn" msprop:Generator_UserColumnName="testcost" type="xs:int" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:TestTb1" />
      <xs:field xpath="mstns:testid" />
    </xs:unique>
  </xs:element>
</xs:schema>